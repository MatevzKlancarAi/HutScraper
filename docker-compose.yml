version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mountain-huts-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-mountain_huts}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - mountain-huts-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mountain Hut Scraper Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mountain-huts-scraper
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Database Configuration
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-mountain_huts}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_MAX_CONNECTIONS: ${DATABASE_MAX_CONNECTIONS:-10}
      
      # Server Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      API_KEY: ${API_KEY:-}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
      TZ: ${TZ:-UTC}
      
      # Scheduled Scraping Configuration
      ENABLE_SCHEDULED_SCRAPING: ${ENABLE_SCHEDULED_SCRAPING:-true}
      SCRAPE_CRON_MORNING: ${SCRAPE_CRON_MORNING:-0 6 * * *}
      SCRAPE_CRON_EVENING: ${SCRAPE_CRON_EVENING:-0 18 * * *}
      MAX_SCRAPE_RETRIES: ${MAX_SCRAPE_RETRIES:-3}
      SCRAPER_RETRY_DELAY: ${SCRAPER_RETRY_DELAY:-300000}
      ENABLE_MAINTENANCE_JOB: ${ENABLE_MAINTENANCE_JOB:-false}
      MAINTENANCE_CRON: ${MAINTENANCE_CRON:-0 2 * * 0}
      
      # Scraper Configuration
      HEADLESS_MODE: ${HEADLESS_MODE:-true}
      SLOW_MO: ${SLOW_MO:-0}
      SCREENSHOT_ON_ERROR: ${SCREENSHOT_ON_ERROR:-true}
      SCRAPER_MAX_CONCURRENCY: ${SCRAPER_MAX_CONCURRENCY:-2}
      SCRAPER_DELAY_HUTS: ${SCRAPER_DELAY_HUTS:-5000}
      SCRAPER_DELAY_ROOMS: ${SCRAPER_DELAY_ROOMS:-2000}
      
      # Notification Configuration
      ALERT_EMAIL: ${ALERT_EMAIL:-}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      
    volumes:
      # Persist logs, screenshots, and results
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
      - ./results:/app/results
      # Mount configuration files
      - ./config:/app/config:ro
      
    networks:
      - mountain-huts-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: mountain-huts-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - mountain-huts-network
    depends_on:
      - app
    profiles:
      - production

networks:
  mountain-huts-network:
    driver: bridge
    name: mountain-huts-network

volumes:
  postgres_data:
    driver: local
    name: mountain-huts-postgres-data